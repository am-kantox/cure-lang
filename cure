#!/usr/bin/env bash
# Cure Programming Language Compiler - Shell Wrapper
# This script provides a convenient command-line interface to the Cure compiler

set -euo pipefail

# Get the directory where this script is located
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# Cure project directories
CURE_ROOT="${SCRIPT_DIR}"
CURE_EBIN="${CURE_ROOT}/_build/ebin"
CURE_SRC="${CURE_ROOT}/src"

# Check if we're in the right directory
if [[ ! -d "${CURE_SRC}" ]]; then
    echo "Error: Cure source directory not found at ${CURE_SRC}" >&2
    echo "Make sure you're running this script from the Cure project root." >&2
    exit 1
fi

# Ensure the compiler is built
if [[ ! -d "${CURE_EBIN}" ]] || [[ -z "$(find "${CURE_EBIN}" -name "*.beam" 2>/dev/null)" ]]; then
    echo "Cure compiler not found. Building..." >&2
    if ! make -C "${CURE_ROOT}" all; then
        echo "Error: Failed to build Cure compiler" >&2
        echo "Run 'make all' manually to see detailed error messages." >&2
        exit 1
    fi
fi

# Check for required BEAM files
REQUIRED_MODULES=(
    "cure_cli.beam"
    "cure_lexer.beam" 
    "cure_parser.beam"
    "cure_typechecker.beam"
    "cure_codegen.beam"
)

MISSING_MODULES=()
for module in "${REQUIRED_MODULES[@]}"; do
    if [[ ! -f "${CURE_EBIN}/${module}" ]]; then
        MISSING_MODULES+=("${module}")
    fi
done

if [[ ${#MISSING_MODULES[@]} -gt 0 ]]; then
    echo "Error: Missing required compiler modules:" >&2
    printf '  %s\n' "${MISSING_MODULES[@]}" >&2
    echo "Run 'make all' to build all required components." >&2
    exit 1
fi

# Set up Erlang code path
ERL_CODE_PATHS=(
    "-pa" "${CURE_EBIN}"
    "-pa" "${CURE_SRC}"
    "-pa" "${CURE_SRC}/lexer"
    "-pa" "${CURE_SRC}/parser" 
    "-pa" "${CURE_SRC}/types"
    "-pa" "${CURE_SRC}/fsm"
    "-pa" "${CURE_SRC}/codegen"
)

# Debug mode support
if [[ "${CURE_DEBUG:-}" == "1" ]]; then
    echo "Debug mode enabled" >&2
    echo "Cure root: ${CURE_ROOT}" >&2
    echo "Cure ebin: ${CURE_EBIN}" >&2
    echo "Arguments: $*" >&2
fi

# Handle special cases for development
case "${1:-}" in
    "shell")
        echo "Starting Cure development shell..."
        exec erl "${ERL_CODE_PATHS[@]}" -eval "cure_cli:check_cure_installation()."
        ;;
    "test")
        echo "Running Cure compiler tests..."
        exec make -C "${CURE_ROOT}" test
        ;;
    "build") 
        echo "Building Cure compiler..."
        exec make -C "${CURE_ROOT}" all
        ;;
    "clean")
        echo "Cleaning Cure build artifacts..."
        exec make -C "${CURE_ROOT}" clean
        ;;
esac

# Create arguments list for erlang
ARGS_LIST="["
for arg in "$@"; do
    if [[ -z "${ARGS_LIST}" || "${ARGS_LIST}" == "[" ]]; then
        ARGS_LIST="[\"${arg}\""
    else
        ARGS_LIST="${ARGS_LIST},\"${arg}\""
    fi
done
ARGS_LIST="${ARGS_LIST}]"

# Run the main CLI with all arguments
exec erl "${ERL_CODE_PATHS[@]}" -noshell -eval "cure_cli:main(${ARGS_LIST})" -s init stop
