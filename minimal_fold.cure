module MinimalFold do
  export [test_local_fold/0]
  
  # Local implementation of fold to test the logic
  def local_fold(list: List(Int), init: Int, func: Int -> Int -> Int): Int =
    match list do
      [] -> init
      [h | t] -> 
        let partial_func = func(h)
        partial_func(local_fold(t, init, func))
    end
  
  def test_local_fold(): Int =
    let numbers = [1, 2, 3]
    local_fold(numbers, 0, add_func)
  
  def add_func(x: Int): Int -> Int = 
    fn(acc) -> x + acc end

end