# Cure Standard Library Demo
# Demonstrates usage of the standard library modules

module StdDemo do
  import Std [
    # Core functionality
    Option, Result, ok, error, some, none,
    map/2, filter/2, foldl/3, head/1, tail/1,
    
    # Math and string functions
    abs/1, sqrt/1, string_concat/2, split/2,
    
    # FSM functions
    fsm_create/2, fsm_send_safe/2, create_counter/1
  ]

  export [main/0, demo_list_ops/0, demo_result_ops/0, demo_fsm_ops/0]

  def main(): Result(Int, String) =
    print("=== Cure Standard Library Demo ===")
    
    # Demo list operations
    print("\\n--- List Operations Demo ---")
    demo_list_ops()
    
    # Demo Result/Option operations  
    print("\\n--- Result/Option Operations Demo ---")
    demo_result_ops()
    
    # Demo FSM operations
    print("\\n--- FSM Operations Demo ---")
    demo_fsm_ops()
    
    print("\\n=== Demo Complete ===")
    ok(0)

  def demo_list_ops(): Unit =
    # Demonstrate list operations from standard library
    let numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
    
    print("Original list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]")
    
    # Map operation - double each number
    let doubled = map(numbers, fn(x) -> x * 2 end)
    print("Doubled: " ++ list_to_string(doubled))
    
    # Filter operation - only even numbers
    let evens = filter(numbers, fn(x) -> x % 2 == 0 end)
    print("Even numbers: " ++ list_to_string(evens))
    
    # Fold operation - sum all numbers
    let sum = foldl(numbers, 0, fn(x, acc) -> x + acc end)
    print("Sum: " ++ int_to_string(sum))
    
    # Head and tail operations
    match head(numbers) do
      [first | rest] ->
        print("First element: " ++ int_to_string(first))
        print("Rest has " ++ int_to_string(length(rest)) ++ " elements")
      [] -> 
        print("List is empty")
    end
    
    ok

  def demo_result_ops(): Unit =
    # Demonstrate Result and Option operations
    print("Testing safe division...")
    
    let safe_div = fn(x, y) ->
      if y == 0 then error("Division by zero")
      else ok(x / y)
      end
    end
    
    # Successful division
    match safe_div(10, 2) do
      Ok(result) -> print("10 / 2 = " ++ float_to_string(result))
      Error(err) -> print("Error: " ++ err)
    end
    
    # Division by zero
    match safe_div(10, 0) do
      Ok(result) -> print("10 / 0 = " ++ float_to_string(result))
      Error(err) -> print("Error: " ++ err)
    end
    
    # Chain operations with map_ok
    let calc_result = safe_div(20, 4)
      |> map_ok(fn(x) -> x * 2 end)
      |> map_ok(fn(x) -> x + 1 end)
    
    match calc_result do
      Ok(result) -> print("Chained calculation result: " ++ float_to_string(result))
      Error(err) -> print("Chained calculation error: " ++ err)
    end
    
    # Option operations
    let maybe_find = fn(list, target) ->
      find(list, fn(x) -> x == target end)
    end
    
    let numbers = [1, 2, 3, 4, 5]
    
    match maybe_find(numbers, 3) do
      Some(found) -> print("Found: " ++ int_to_string(found))
      None -> print("Not found")
    end
    
    match maybe_find(numbers, 99) do
      Some(found) -> print("Found: " ++ int_to_string(found))  
      None -> print("99 not found in list")
    end
    
    ok

  def demo_fsm_ops(): Unit =
    # Demonstrate FSM operations using standard library
    print("Creating a counter FSM...")
    
    match create_counter(0) do
      Ok(counter) ->
        print("Counter created successfully")
        
        # Send some events
        fsm_send_safe(counter, :increment)
        fsm_send_safe(counter, :increment)  
        fsm_send_safe(counter, :increment)
        
        print("Sent 3 increment events")
        
        # Try to get current state (would need runtime support)
        print("Counter demonstration complete")
        
      Error(err) ->
        print("Failed to create counter: " ++ err)
    end
    
    ok

  # Helper functions for string conversion (placeholders)
  defp list_to_string(list: List(Int)): String =
    "[" ++ join_ints(list, ", ") ++ "]"

  defp join_ints(list: List(Int), separator: String): String =
    match list do
      [] -> ""
      [x] -> int_to_string(x)
      [x | rest] -> int_to_string(x) ++ separator ++ join_ints(rest, separator)
    end

  defp int_to_string(n: Int): String =
    # Would be a built-in function
    "42"  # Placeholder

  defp float_to_string(f: Float): String =
    # Would be a built-in function  
    "3.14"  # Placeholder

  defp print(message: String): Unit =
    # Built-in print function
    ok
end

# Additional example showing mathematical operations
module MathDemo do
  import Std [pi/0, sqrt/1, abs/1, safe_divide/2, safe_sqrt/1]
  import Std.Math [sin/1, cos/1, factorial/1, gcd/2]
  
  export [demo_math/0]

  def demo_math(): Unit =
    print("=== Math Operations Demo ===")
    
    # Constants
    print("π = " ++ float_to_string(pi()))
    
    # Basic operations
    print("|−5| = " ++ int_to_string(abs(-5)))
    print("√16 = " ++ float_to_string(sqrt(16.0)))
    
    # Safe operations
    match safe_divide(10.0, 3.0) do
      Ok(result) -> print("10 ÷ 3 = " ++ float_to_string(result))
      Error(err) -> print("Division error: " ++ err)
    end
    
    match safe_sqrt(-4.0) do
      Ok(result) -> print("√(−4) = " ++ float_to_string(result))
      Error(err) -> print("Square root error: " ++ err)
    end
    
    # Number theory
    print("gcd(48, 18) = " ++ int_to_string(gcd(48, 18)))
    print("5! = " ++ int_to_string(factorial(5)))
    
    ok

  defp float_to_string(f: Float): String = "0.0"  # Placeholder
  defp int_to_string(n: Int): String = "0"        # Placeholder
  defp print(message: String): Unit = ok          # Placeholder
end

# String processing example
module StringDemo do
  import Std [
    string_concat/2, split/2, trim/1, to_upper/1, 
    contains/2, starts_with/2, map/2, filter/2
  ]
  
  export [demo_strings/0]

  def demo_strings(): Unit =
    print("=== String Operations Demo ===")
    
    let text = "  Hello, Cure Programming Language!  "
    print("Original: '" ++ text ++ "'")
    
    # String manipulation
    let trimmed = trim(text)
    print("Trimmed: '" ++ trimmed ++ "'")
    
    let upper = to_upper(trimmed)
    print("Uppercase: '" ++ upper ++ "'")
    
    # String searching
    if contains(trimmed, "Cure") then
      print("Contains 'Cure': Yes")
    else
      print("Contains 'Cure': No")
    end
    
    if starts_with(trimmed, "Hello") then
      print("Starts with 'Hello': Yes")
    else  
      print("Starts with 'Hello': No")
    end
    
    # String splitting
    let words = split(trimmed, " ")
    print("Word count: " ++ int_to_string(length(words)))
    
    # Process each word
    let processed_words = words
      |> filter(fn(word) -> not(string_empty(word)) end)
      |> map(fn(word) -> to_upper(word) end)
    
    print("Processed words: " ++ string_join(processed_words, " | "))
    
    ok

  defp string_empty(s: String): Bool = s == ""   # Placeholder  
  defp string_join(list: List(String), sep: String): String = ""  # Placeholder
  defp int_to_string(n: Int): String = "0"       # Placeholder
  defp print(message: String): Unit = ok         # Placeholder
  defp length(list: List(T)): Int = 0            # Placeholder
end