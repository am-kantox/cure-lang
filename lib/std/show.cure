module Std.Show do
  export [
    show/1,
    show_int/1,
    show_string/1
  ]

  # ============================================================================
  # FFI Declarations for Native Functions
  # ============================================================================
  #
  # Note: Full polymorphic show with runtime type dispatch is not yet supported  
  # by the type system. For now, we provide typed variants.

  # Convert an integer to its string representation
  curify int_to_string(i: Int): String = {cure_show_native, int_to_string, 1}

  # Convert a string (escapes and adds quotes)
  curify escape_string(s: String): String = {cure_show_native, escape_string, 1}

  # ============================================================================
  # Show Functions
  # ============================================================================

  # Show an integer
  def show_int(value: Int): String =
    int_to_string(value)

  # Show a string
  def show_string(value: String): String =
    escape_string(value)

  # Generic show function (placeholder)
  # TODO: Implement full polymorphic dispatch when type system supports it
  def show(value: T): String =
    "<value>"

end
