module Std.List do
  export [
    # Basic list operations
    length/1, is_empty/1, reverse/1,
    head/1, tail/1,
    
    # List construction
    cons/2, append/2, concat/1,
    
    # Simple transformations (non-generic for now)
    map_int/2, filter_int/2,
    
    # Access
    nth/2, take/2, drop/2,
    
    # Simple predicates
    contains_int/2
  ]

  # Basic operations
  def length(list: List(Int)): Int =
    match list do
      [] -> 0
      [_ | t] -> 1 + length(t)
    end

  def is_empty(list: List(Int)): Bool =
    match list do
      [] -> true
      _ -> false
    end

  def reverse(list: List(Int)): List(Int) =
    reverse_helper(list, [])

  # Helper for reverse
  defp reverse_helper(list: List(Int), acc: List(Int)): List(Int) =
    match list do
      [] -> acc
      [h | t] -> reverse_helper(t, [h | acc])
    end

  def head(list: List(Int)): Int =
    match list do
      [] -> 0  # Default value
      [h | _] -> h
    end

  def tail(list: List(Int)): List(Int) =
    match list do
      [] -> []
      [_ | t] -> t
    end

  # List construction
  def cons(element: Int, list: List(Int)): List(Int) =
    [element | list]

  def append(list1: List(Int), list2: List(Int)): List(Int) =
    match list1 do
      [] -> list2
      [h | t] -> [h | append(t, list2)]
    end

  def concat(lists: List(List(Int))): List(Int) =
    match lists do
      [] -> []
      [h | t] -> append(h, concat(t))
    end

  # Simplified transformations (Int only for now)
  def map_int(list: List(Int), f: Int -> Int): List(Int) =
    match list do
      [] -> []
      [h | t] -> [f(h) | map_int(t, f)]
    end

  def filter_int(list: List(Int), predicate: Int -> Bool): List(Int) =
    match list do
      [] -> []
      [h | t] -> 
        let filtered_tail = filter_int(t, predicate)
        if predicate(h) then [h | filtered_tail]
        else filtered_tail
        end
    end

  # Access
  def nth(list: List(Int), index: Int): Int =
    if index == 0 then head(list)
    else nth(tail(list), index - 1)
    end

  def take(list: List(Int), n: Int): List(Int) =
    if n <= 0 then []
    else
      match list do
        [] -> []
        [h | t] -> [h | take(t, n - 1)]
      end
    end

  def drop(list: List(Int), n: Int): List(Int) =
    if n <= 0 then list
    else
      match list do
        [] -> []
        [_ | t] -> drop(t, n - 1)
      end
    end

  # Simple predicates
  def contains_int(list: List(Int), element: Int): Bool =
    match list do
      [] -> false
      [h | t] ->
        if h == element then true
        else contains_int(t, element)
        end
    end

end