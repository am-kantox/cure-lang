module Std.Math do
  export [
    pi/0, e/0,
    abs/1, sign/1, negate/1,
    add/2, subtract/2, multiply/2,
    min/2, max/2, clamp/3,
    power/2, sqrt/1,
    factorial/1, fibonacci/1
  ]

  # Mathematical constants
  def pi(): Float = 3.141592653589793
  def e(): Float = 2.718281828459045

  # Basic operations
  def abs(x: Int): Int =
    if x < 0 then negate(x) else x end

  def sign(x: Int): Int =
    if x > 0 then 1
    else if x < 0 then -1
    else 0
    end

  def negate(x: Int): Int = -x

  def add(x: Int, y: Int): Int = x + y
  def subtract(x: Int, y: Int): Int = x - y  
  def multiply(x: Int, y: Int): Int = x * y

  def min(x: Int, y: Int): Int =
    if x <= y then x else y end

  def max(x: Int, y: Int): Int =
    if x >= y then x else y end

  def clamp(value: Int, min_val: Int, max_val: Int): Int =
    min(max(value, min_val), max_val)

  # Placeholder mathematical functions
  def power(base: Int, exponent: Int): Int =
    if exponent == 0 then 1
    else if exponent == 1 then base
    else multiply(base, power(base, exponent - 1))
    end

  def sqrt(x: Int): Int =
    # Simplified integer square root
    if x <= 1 then x
    else sqrt_helper(x, 1, x)
    end

  defp sqrt_helper(n: Int, low: Int, high: Int): Int =
    if low > high then high
    else
      let mid = (low + high) / 2
      let square = multiply(mid, mid)
      if square == n then mid
      else if square < n then sqrt_helper(n, mid + 1, high)
      else sqrt_helper(n, low, mid - 1)
      end
    end

  # Number theory
  def factorial(n: Int): Int =
    if n <= 1 then 1
    else multiply(n, factorial(n - 1))
    end

  def fibonacci(n: Int): Int =
    if n <= 1 then n
    else add(fibonacci(n - 1), fibonacci(n - 2))
    end
end