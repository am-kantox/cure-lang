module Std.Math do
  export [
    # Constants
    pi/0, e/0, tau/0,
    # Basic operations
    abs/1, sign/1, negate/1,
    add/2, subtract/2, multiply/2, divide/2,
    min/2, max/2, clamp/3,
    # Mathematical functions
    power/2, sqrt/1, factorial/1, fibonacci/1,
    gcd/2, lcm/2,
    # Rounding
    round/1, floor/1, ceiling/1,
    # Safe operations
    safe_divide/2, safe_sqrt/1
  ]

  # Mathematical constants
  def pi(): Float = 3.141592653589793
  def e(): Float = 2.718281828459045
  def tau(): Float = 6.283185307179586

  # Basic operations
  def abs(x: Int): Int =
    if x < 0 then negate(x) else x end

  def sign(x: Int): Int =
    if x > 0 then 1
    else if x < 0 then -1  
    else 0
    end

  def negate(x: Int): Int = -x

  def add(x: Int, y: Int): Int = x + y
  def subtract(x: Int, y: Int): Int = x - y
  def multiply(x: Int, y: Int): Int = x * y

  def divide(x: Int, y: Int): Int =
    if y == 0 then 0 else x / y end

  def min(x: Int, y: Int): Int =
    if x <= y then x else y end

  def max(x: Int, y: Int): Int =
    if x >= y then x else y end

  def clamp(value: Int, min_val: Int, max_val: Int): Int =
    min(max(value, min_val), max_val)

  # Mathematical functions
  def power(base: Int, exponent: Int): Int =
    if exponent == 0 then 1
    else if exponent == 1 then base
    else if exponent > 1 then multiply(base, power(base, subtract(exponent, 1)))
    else 1
    end

  def sqrt(x: Int): Int =
    if x <= 1 then x
    else sqrt_helper(x, 1, x)
    end

  defp sqrt_helper(n: Int, low: Int, high: Int): Int =
    if low > high then high
    else
      let mid = divide(add(low, high), 2)
      let square = multiply(mid, mid)
      if square == n then mid
      else if square < n then sqrt_helper(n, add(mid, 1), high)
      else sqrt_helper(n, low, subtract(mid, 1))
      end
    end

  # Number theory
  def factorial(n: Int): Int =
    if n <= 1 then 1
    else multiply(n, factorial(subtract(n, 1)))
    end

  def fibonacci(n: Int): Int =
    if n <= 1 then n
    else add(fibonacci(subtract(n, 1)), fibonacci(subtract(n, 2)))
    end

  def gcd(a: Int, b: Int): Int =
    if b == 0 then abs(a)
    else gcd(b, a % b)
    end

  def lcm(a: Int, b: Int): Int =
    if a == 0 then 0
    else if b == 0 then 0
    else divide(abs(multiply(a, b)), gcd(a, b))
    end

  # Rounding functions (simplified for integers)
  def round(x: Float): Int = 
    # Simplified - would need proper float to int conversion
    42  # Placeholder

  def floor(x: Float): Int = 
    # Simplified - would need proper floor implementation
    42  # Placeholder

  def ceiling(x: Float): Int = 
    # Simplified - would need proper ceiling implementation  
    42  # Placeholder

  # Safe operations
  def safe_divide(x: Int, y: Int): Int =
    if y == 0 then 0 else divide(x, y) end

  def safe_sqrt(x: Int): Int =
    if x < 0 then 0 else sqrt(x) end
end