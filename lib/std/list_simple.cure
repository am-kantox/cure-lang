# Cure Standard Library - List Module (Simplified)
# Basic list operations

module Std.List do
  export [
    # List construction
    cons/2,
    # List properties
    head/1, tail/1, length/1, is_empty/1,
    # List transformation  
    map/2, reverse/1, append/2
  ]

  # List construction - using temporary workaround
  def cons(h: T, t: List(T)): List(T) =
    match t do
      [] -> [h]
      _ -> [h] ++ t
    end

  # List properties
  def head(list: List(T)): T =
    match list do
      [h | _] -> h
    end

  def tail(list: List(T)): List(T) =
    match list do
      [_ | t] -> t
    end

  def length(list: List(T)): Int =
    length_helper(list, 0)

  def length_helper(list: List(T), acc: Int): Int =
    match list do
      [] -> acc
      [_ | t] -> length_helper(t, acc + 1)
    end

  def is_empty(list: List(T)): Bool =
    match list do
      [] -> true
      _ -> false
    end

  # List transformation
  def map(list: List(T), f: T -> U): List(U) =
    match list do
      [] -> []
      [h | t] -> [f(h) | map(t, f)]
    end

  def reverse(list: List(T)): List(T) =
    reverse_helper(list, [])

  def reverse_helper(list: List(T), acc: List(T)): List(T) =
    match list do
      [] -> acc
      [h | t] -> reverse_helper(t, [h | acc])
    end

  def append(list1: List(T), list2: List(T)): List(T) =
    match list1 do
      [] -> list2
      [h | t] -> [h | append(t, list2)]
    end
end