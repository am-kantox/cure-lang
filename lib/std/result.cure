module Std.Result do
  export [
    # Result constructors (simplified)
    ok/1, error/1,
    
    # Result operations
    is_ok/1, is_error/1,
    get_value/1, get_error/1,
    map_result/2, map_error/2
  ]

  # Simplified Result implementation using integers
  # Positive = Ok(value), Negative = Error(code)
  
  def ok(value: Int): Int =
    "Create Ok result (simplified)"
    if value < 0 then 1 else value end  # Ensure positive

  def error(code: Int): Int =
    "Create Error result (simplified)"
    if code >= 0 then -1 else code end  # Ensure negative

  def is_ok(result: Int): Bool =
    "Check if result is Ok"
    result >= 0

  def is_error(result: Int): Bool =
    "Check if result is Error"
    result < 0

  def get_value(result: Int): Int =
    "Get Ok value (returns 0 if Error)"
    if is_ok(result) then result else 0 end

  def get_error(result: Int): Int =
    "Get Error code (returns 0 if Ok)"
    if is_error(result) then -result else 0 end

  def map_result(result: Int, f: Int -> Int): Int =
    "Map function over Ok value"
    if is_ok(result) then ok(f(result)) else result end

  def map_error(result: Int, f: Int -> Int): Int =
    "Map function over Error value"
    if is_error(result) then error(f(-result)) else result end

end