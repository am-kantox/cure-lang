module Std.Result do
  export [
    # Result operations
    ok/1, error/1,
    is_ok/1, is_error/1,
    get_value/1, get_error/1,
    map_result/2, map_error/2
  ]

  # Result type using variant constructors
  # Result(T, E) = Ok(T) | Error(E)
  # For now, we use a simplified implementation with tuples
  
  # Constructor functions that return Result type
  def ok(value: Int): Int =
    "Create Ok result"
    value

  def error(err: Int): Int =
    "Create Error result"
    err

  def is_ok(result: Int): Bool =
    "Check if result is Ok"
    result >= 0

  def is_error(result: Int): Bool =
    "Check if result is Error"
    result < 0

  def get_value(result: Int): Int =
    "Get Ok value (returns 0 if Error)"
    match is_ok(result) do
      true -> result
      false -> 0
    end

  def get_error(result: Int): Int =
    "Get Error code (returns 0 if Ok)"
    match is_error(result) do
      true -> -result
      false -> 0
    end

  def map_result(result: Int, f: Int -> Int): Int =
    "Map function over Ok value"
    match is_ok(result) do
      true -> ok(f(result))
      false -> result
    end

  def map_error(result: Int, f: Int -> Int): Int =
    "Map function over Error value"
    match is_error(result) do
      true -> error(f(-result))
      false -> result
    end

end
