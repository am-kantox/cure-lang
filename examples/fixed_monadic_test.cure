# Fixed Monadic Pipe Test
module FixedMonadicTest do
  export [main/0, double/1, add_ten/1, failing_function/1, safe_double/1]

  def main(): Int =
    let _ = print("=== Test 1: Basic pipe ===")
    let result1 = 5 |> safe_double
    let _ = print("Result should be Ok(10)")
    
    let _ = print("=== Test 2: Using safe functions ===")
    let result2 = ok(3) |> safe_double |> safe_add_ten
    let _ = print("Result should handle Ok values properly")
    
    let _ = print("=== Test 3: Error propagation ===")
    let result3 = 60 |> failing_function |> safe_double
    let _ = print("Result should propagate error")
    
    let _ = print("=== All tests completed ===")
    42
    
  # Regular functions that work with raw values
  def double(x: Int): Int =
    x * 2
    
  def add_ten(x: Int): Int =
    x + 10
    
  # Functions that properly handle Result types  
  def safe_double(x): Int =
    # This would need proper Result type handling
    # For now, just return a regular value
    case x of
      _ -> x * 2
    end
    
  def safe_add_ten(x): Int =
    case x of
      _ -> x + 10
    end
    
  def failing_function(x: Int) =
    if x > 50 then
      error("Value too large")
    else
      ok(x + 5)
end