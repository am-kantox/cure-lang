# Advanced Traffic Light FSM Demo
# 
# This example demonstrates the Cure language's FSM syntax including:
# - State definitions with multiple states
# - Event-driven state transitions
# - Emergency handling across all states
# - Maintenance mode patterns
#
# NOTE: This is a syntactic demonstration. The print() function in the
# current Cure stdlib is a stub. To actually execute this FSM at runtime,
# you would use the cure_fsm_runtime Erlang module (see examples/*.erl).
#
# This example successfully compiles and type-checks, demonstrating
# the Cure language's FSM capabilities.

module AdvancedTrafficLight do
  export [main/0, run_demo/0]

  # Type definitions for state data
  record StateData do
    cycles_completed: Int
    total_transitions: Int
    emergency_count: Int
    vehicle_count: Int
  end

  # Advanced Traffic Light FSM with actions and guards
  fsm AdvancedTrafficLight do
    states: [Red, Green, Yellow, Maintenance]
    initial: Red

    # Red state - waiting at stop
    state Red do
      # Transition to Green when timer expires
      event(:timer) -> Green
      # Emergency transition to Maintenance
      event(:emergency_stop) -> Maintenance
    end

    # Green state - traffic flowing
    state Green do
      # Transition to Yellow when timer expires
      event(:timer) -> Yellow
      # Emergency transition to Maintenance
      event(:emergency_stop) -> Maintenance
    end

    # Yellow state - caution/transition
    state Yellow do
      # Transition to Red when timer expires
      event(:timer) -> Red
      # Emergency transition to Maintenance
      event(:emergency_stop) -> Maintenance
    end

    # Maintenance state - system under maintenance
    state Maintenance do
      # Resume normal operation
      event(:resume) -> Red
    end
  end

  # === DEMO HELPER FUNCTIONS ===
  # Simple demonstration of FSM usage

  # === DEMO EXECUTION ===

  def main(): Unit =
    print_header()
    run_demo()
    print("\n✓ Demo completed successfully!\n")

  def print_header(): Unit =
    print("\n╔══════════════════════════════════════════════════════════════╗")
    print("║  Advanced Traffic Light FSM Demo - Cure Programming Language ║")
    print("╚══════════════════════════════════════════════════════════════╝\n")

  def run_demo(): Unit =
    # Initialize FSM with starting data
    print("🚦 Demonstrating Advanced Traffic Light FSM...")
    print("\n   States: Red, Green, Yellow, Maintenance")
    print("   Transitions: timer events and emergency stops")
    print("\n   FSM Structure Demonstrates:")
    print("   • Multiple state transitions")
    print("   • Event-driven state changes")
    print("   • Emergency handling across all states")
    print("   • Maintenance mode with resume capability")
    print("\n   To run this FSM, use the cure_fsm_runtime module")
    print("   from Erlang with the FSM definition above.")

end
