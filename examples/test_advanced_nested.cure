module TestAdvancedNested do
  export [test_nested_with_inner_ops/0, test_deeply_nested/0, test_varying_inner_sizes/0]
  
  import Std.Vector [length/1, is_empty/1]
  
  def test_nested_with_inner_ops(): Int =
    let outer_vec = [[1, 2, 3], [4, 5], []]
    let first_inner = [1, 2, 3]
    let second_inner = [4, 5]  
    let third_inner = []
    
    let outer_len = length(outer_vec)
    let first_len = length(first_inner)
    let second_len = length(second_inner)
    let third_len = length(third_inner)
    
    # Return sum of all lengths: 3 + 3 + 2 + 0 = 8
    outer_len + first_len + second_len + third_len
    
  def test_deeply_nested(): Int =
    let deep = [[[1, 2]], [[3]], [[]]]
    length(deep)
    
  def test_varying_inner_sizes(): Int =
    let varying = [[1], [2, 3, 4, 5, 6], [], [7, 8, 9]]
    length(varying)
    
end