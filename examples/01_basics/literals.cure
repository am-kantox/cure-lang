# Cure Language - Basic Literals Example
# Demonstrates all literal types in Cure

module Literals do
  export [main/0, demonstrate_literals/0]
  
  # Integer literals
  def int_examples(): Int do
    let positive = 42 in
    let negative = -17 in
    let zero = 0 in
    positive
  end
  
  # Boolean literals
  def bool_examples(): Bool do
    let t = true in
    let f = false in
    t
  end
  
  # Atom literals (symbols)
  def atom_examples(): Atom do
    let status = :ok in
    let error = :error in
    let custom = :my_atom in
    status
  end
  
  # String literals
  def string_examples(): String do
    let greeting = "Hello, Cure!" in
    let multiline = "This is a
    multiline string" in
    greeting
  end
  
  # List literals
  def list_examples(): List(Int) do
    let empty = [] in
    let numbers = [1, 2, 3, 4, 5] in
    let mixed = [10, 20, 30] in
    numbers
  end
  
  # Tuple literals
  def tuple_examples(): (Int, String, Bool) do
    let pair = (42, "answer") in
    let triple = (1, "one", true) in
    triple
  end
  
  # Cons expressions (list construction)
  def cons_examples(): List(Int) do
    let list1 = [1 | [2, 3]] in
    let list2 = [1, 2 | [3, 4, 5]] in
    list1
  end
  
  def demonstrate_literals(): Int do
    let i = int_examples() in
    let b = bool_examples() in
    let a = atom_examples() in
    let s = string_examples() in
    let l = list_examples() in
    let t = tuple_examples() in
    0
  end
  
  def main(): Int do
    demonstrate_literals()
    0
  end
end
