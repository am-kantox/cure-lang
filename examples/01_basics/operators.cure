# Cure Language - Operators Example
# Demonstrates arithmetic, comparison, and logical operators

module Operators do
  export [main/0]
  
  # Arithmetic operators
  def arithmetic_ops(x: Int, y: Int): Int do
    let sum = x + y in
    let diff = x - y in
    let product = x * y in
    let quotient = x / y in
    sum + diff + product + quotient
  end
  
  # Comparison operators
  def comparison_ops(x: Int, y: Int): Bool do
    let eq = x == y in
    let ne = x != y in
    let lt = x < y in
    let le = x <= y in
    let gt = x > y in
    let ge = x >= y in
    eq
  end
  
  # Logical operators with booleans
  def logical_ops(a: Bool, b: Bool): Bool do
    let and_result = a && b in
    let or_result = a || b in
    and_result
  end
  
  # Negation
  def negation_example(x: Int): Int do
    let neg = -x in
    neg
  end
  
  # Boolean negation
  def bool_negation(b: Bool): Bool do
    match b do
      true -> false
      false -> true
    end
  end
  
  # Operator precedence demonstration
  def precedence_demo(): Int do
    let result1 = 2 + 3 * 4 in        # Should be 14 (multiplication first)
    let result2 = (2 + 3) * 4 in      # Should be 20 (parentheses first)
    let result3 = 10 - 3 - 2 in       # Should be 5 (left associative)
    result1
  end
  
  # Complex expression
  def complex_expr(x: Int, y: Int): Bool do
    let result = (x + y) * 2 > x * y in
    result
  end
  
  # Chained comparisons
  def is_in_range(x: Int, min: Int, max: Int): Bool do
    let above_min = x >= min in
    let below_max = x <= max in
    above_min && below_max
  end
  
  def main(): Int do
    let arith = arithmetic_ops(10, 3) in
    let comp = comparison_ops(5, 10) in
    let logic = logical_ops(true, false) in
    let neg = negation_example(42) in
    let prec = precedence_demo() in
    0
  end
end
