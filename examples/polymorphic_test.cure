%% Polymorphic Functions Test
%% Demonstrates parametric polymorphism in Cure

module PolymorphicTest do
  export [identity/1, first/1, map/2, filter/2, compose/2]

  %% Simple polymorphic identity function
  %% Type: forall T. T -> T
  def identity<T>(x: T) -> T = x

  %% Get first element of a pair
  %% Type: forall T, U. {T, U} -> T
  def first<T, U>(pair: {T, U}) -> T = 
    match pair do
      {x, _} -> x
    end

  %% Polymorphic list map
  %% Type: forall T, U. (T -> U, List(T)) -> List(U)
  def map<T, U>(f: T -> U, xs: List(T)) -> List(U) =
    match xs do
      [] -> []
      [h | t] -> [f(h) | map<T, U>(f, t)]
    end

  %% Polymorphic list filter
  %% Type: forall T. (T -> Bool, List(T)) -> List(T)
  def filter<T>(pred: T -> Bool, xs: List(T)) -> List(T) =
    match xs do
      [] -> []
      [h | t] ->
        if pred(h) then
          [h | filter<T>(pred, t)]
        else
          filter<T>(pred, t)
        end
    end

  %% Function composition
  %% Type: forall A, B, C. (B -> C, A -> B) -> (A -> C)
  def compose<A, B, C>(g: B -> C, f: A -> B) -> (A -> C) =
    fn(x: A) -> g(f(x))

end
