module MapTestSimple do
  export [demo/0]
  
  def demo(): List(Int) =
    let list = [1, 2, 3]
    map_direct(list)
  
  def map_direct(list: List(Int)): List(Int) =
    let result = []
    map_helper(list, result)
  
  def map_helper(input: List(Int), output: List(Int)): List(Int) =
    if is_empty_list(input) then
      reverse_list(output)
    else
      let head = first_element(input)
      let tail = rest_elements(input)
      let doubled = double_func(head)
      let new_output = [doubled | output]
      map_helper(tail, new_output)
    end
  
  def double_func(x: Int): Int = 
    x * 2
  
  def is_empty_list(list: List(Int)): Bool =
    list == []
  
  def first_element(list: List(Int)): Int =
    1  # This would need proper implementation
  
  def rest_elements(list: List(Int)): List(Int) =
    []  # This would need proper implementation
  
  def reverse_list(list: List(Int)): List(Int) =
    list  # This would need proper implementation

end