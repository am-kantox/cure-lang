def demo() do
  let numbers = [1, 2, 3, 4, 5] in
  
  // Pattern matching demonstrates dependent type behavior
  let pattern_result = match numbers do
    [] -> "Empty - length is 0"
    [single] -> "Single element"  
    [a, b] -> "Exactly two elements"
    [first | rest] -> "Multi-element with head and tail"
  end in
  
  // Safe head extraction with guaranteed non-empty list
  let first_element = match numbers do
    [head | _] -> head
    [] -> 0
  end in
  
  // Higher-order function with type preservation
  let doubled = map_list(numbers, fn(x) -> x * 2 end) in
  
  // Demonstrate compile-time type safety
  let sum = first_element + 42 in
  
  {
    original: numbers,
    pattern: pattern_result,
    first: first_element,
    doubled: doubled,
    sum: sum,
    message: "Dependent types provide compile-time safety!"
  }
end

def map_list(list, f) do
  match list do
    [] -> []
    [head | tail] -> [f(head) | map_list(tail, f)]
  end
end