module FinalFoldTest do
  export [test_base_case/0, test_single_fold/0, test_multiple_fold/0]
  
  # Test base case: empty list should return init value
  def test_base_case(): Int =
    my_fold([], 42, add_func)
    
  # Test single element: should return 1 + 0 = 1
  def test_single_fold(): Int =
    my_fold([1], 0, add_func)
    
  # Test multiple elements: should return 1 + 2 + 3 + 0 = 6  
  def test_multiple_fold(): Int =
    my_fold([1, 2, 3], 0, add_func)
  
  def add_func(x: Int): Int -> Int = 
    fn(acc) -> x + acc end
  
  # Fixed fold implementation - now works correctly!
  def my_fold(list: List(T), init: U, func: T -> U -> U): U =
    match list do
      [] -> init
      [h | t] -> 
        let partial = func(h)
        partial(my_fold(t, init, func))
    end
    
end