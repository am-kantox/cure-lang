module BasicDependentTypes do
  export [demo/0]

  def demo() do
    let numbers = [1, 2, 3, 4, 5] in
    
    // Pattern matching with type constraints
    let result = match numbers do
      [] -> "Empty list - length 0"
      [single] -> "Single element list"
      [a, b] -> "Two element list"
      [first | rest] -> "Multi-element list with head and tail"
    end in
    
    // Safe operations with compile-time guarantees
    let first_element = match numbers do
      [head | _] -> head
      [] -> 0
    end in
    
    let processed = map_numbers(numbers, fn(x) -> x * 2 end) in
    
    {
      original: numbers,
      pattern_result: result,
      first: first_element,
      doubled: processed,
      message: "Basic dependent types working!"
    }
  end

  def map_numbers(list, f) do
    match list do
      [] -> []
      [head | tail] -> [f(head) | map_numbers(tail, f)]
    end
  end
end