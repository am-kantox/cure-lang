module VectorTest do
  export [main/0]
  
  import Std.Vector [length/1, is_empty/1, contains/2, reverse/2]
  import Std.Core ['and'/2, 'not'/1]
  
  def main(): Bool =
    let numbers = [1, 2, 3, 4, 5]
    let empty = []
    let single = [42]
    let another_empty = []
    
    # Test is_empty on different vectors
    let empty_check = is_empty(empty)         # Should be true
    let numbers_check = is_empty(numbers)     # Should be false
    let single_check = is_empty(single)       # Should be false  
    let another_empty_check = is_empty(another_empty)  # Should be true
    
    # Test length consistency with is_empty
    let empty_len = length(empty)             # Should be 0
    let numbers_len = length(numbers)         # Should be 5
    let single_len = length(single)           # Should be 1
    let another_empty_len = length(another_empty)  # Should be 0
    
    # Verify is_empty logic: is_empty should be true iff length == 0
    let empty_consistent = (empty_check == (empty_len == 0))
    let numbers_consistent = (numbers_check == (numbers_len == 0))
    let single_consistent = (single_check == (single_len == 0))
    let another_empty_consistent = (another_empty_check == (another_empty_len == 0))
    
    # Test other operations for completeness
    let contains_check = contains(numbers, 3)  # Should be true
    let reversed = reverse(numbers, [])
    let reversed_len = length(reversed)        # Should be 5
    
    # All tests should pass
    numbers == reverse(reversed, [])
    
end
