# Comprehensive demonstration of the monadic pipe operator
# Shows automatic ok() wrapping and error propagation

module MonadicPipeDemo do
  export [main/0, double/1, add_ten/1, divide_by_two/1]

  def main(): Int =
    let _ = print("=== Monadic Pipe Operator Demo ===")
    
    # Demo 1: Simple monadic pipe
    let _ = print("\\nDemo 1: Simple monadic pipe")
    let _ = print("Expression: 5 |> double")
    let result1 = 5 |> double
    let _ = print("Expected: {'Ok', 10}")
    
    # Demo 2: Chain compatible functions (both return regular values)  
    let _ = print("\\nDemo 2: Chaining regular functions")
    let _ = print("Expression: 3 |> double |> add_ten")
    let result2 = 3 |> double |> add_ten
    let _ = print("Expected: Nested Result type")
    
    # Demo 3: Starting with an existing Result
    let _ = print("\\nDemo 3: Starting with Result type")
    let _ = print("Expression: ok(7) |> double")  
    let result3 = ok(7) |> double
    let _ = print("Expected: {'Ok', 14}")
    
    # Demo 4: Using a function that can return errors
    let _ = print("\\nDemo 4: Error propagation")
    let _ = print("Expression: safe_divide(10, 0) |> double")
    let result4 = safe_divide(10, 0) |> double
    let _ = print("Expected: {'Error', 'Division by zero'}")
    
    42
    
  # Helper functions - all accept regular values and return regular values
  def double(x: Int): Int =
    x * 2
    
  def add_ten(x: Int): Int = 
    x + 10
    
  def divide_by_two(x: Int): Int =
    x / 2
    
  # Function that returns a Result type
  def safe_divide(a: Int, b: Int) =
    if b == 0 then
      error("Division by zero")
    else  
      ok(a / b)
    end
end