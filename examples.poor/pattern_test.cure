# Pattern Matching Test with Monadic Pipes
module PatternTest do
  export [main/0, double/1, failing_function/1]

  def main(): Int =
    # Test 1: Pattern matching on Ok result
    let result1 = 5 |> double
    let _ = match result1 do
      Ok(value) -> println("Test 1: Success, value is working")
      Error(reason) -> println("Test 1: Error occurred")
    end
    
    # Test 2: Pattern matching on Error result  
    let result2 = 60 |> failing_function |> double
    let _ = match result2 do
      Ok(value) -> println("Test 2: Unexpected success")
      Error(reason) -> println("Test 2: Error propagated correctly")
    end
    
    # Test 3: Chaining with Ok unwrapping
    let result3 = 3 |> double |> double
    let _ = match result3 do
      Ok(value) -> println("Test 3: Chaining works")
      Error(reason) -> println("Test 3: Unexpected error")
    end
    
    42
    
  def double(x: Int): Int =
    x * 2
    
  def failing_function(x: Int): Result(Int, String) =
    if x > 50 then
      error("Value too large")
    else
      ok(x + 5)
end
