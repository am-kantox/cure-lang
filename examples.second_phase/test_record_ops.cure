# Test file for new record operations: field access and record update

module TestRecordOps do
  export [main/0]
  
  import Std.Io [println/1]
  
  # Simple record definition
  record Person do
    name: String
    age: Int
  end
  
  record Point do
    x: Float
    y: Float
  end
  
  # Test direct field access
  def get_name(p: Person): String =
    p.name  # Direct field access
  
  def get_age(p: Person): Int =
    p.age
  
  def get_point_x(pt: Point): Float =
    pt.x
  
  # Test record update  
  def birthday(p: Person): Person =
    Person{p | age: p.age + 1}  # Update age field
  
  def move_point(pt: Point, dx: Float, dy: Float): Point =
    Point{pt | x: pt.x + dx, y: pt.y + dy}  # Update both fields
  
  def main(): Int =
    println("=== Testing Record Operations ===")
    
    # Create records
    let alice = Person{name: "Alice", age: 30}
    let bob = Person{name: "Bob", age: 25}
    
    # Test field access
    println("Alice's name: " ++ get_name(alice))
    println("Bob's age: " ++ show(get_age(bob)))
    
    # Test record update
    let alice_older = birthday(alice)
    println("Alice after birthday: " ++ get_name(alice_older) ++ ", age: " ++ show(get_age(alice_older)))
    
    # Test with points
    let origin = Point{x: 0.0, y: 0.0}
    println("Origin x: " ++ show(get_point_x(origin)))
    
    let moved = move_point(origin, 5.0, 3.0)
    println("Moved point x: " ++ show(moved.x))  # Field access in expression
    println("Moved point y: " ++ show(moved.y))
    
    0
end
